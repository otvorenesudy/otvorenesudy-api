---
http_interactions:
- request:
    method: get
    uri: https://obcan.justice.sk/opendata
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - '1'
      Set-Cookie:
      - COOKIE_SUPPORT=true; Expires=Tue, 14-Dec-2066 23:59:10 GMT; Path=/; Secure;
        HttpOnly
      - COOKIE_SUPPORT=true; Expires=Tue, 14-Dec-2066 23:59:11 GMT; Path=/; Secure;
        HttpOnly
      - COOKIE_SUPPORT=true; Expires=Tue, 14-Dec-2066 23:59:11 GMT; Path=/; Secure;
        HttpOnly
      - GUEST_LANGUAGE_ID=sk_SK; Expires=Tue, 14-Dec-2066 23:59:10 GMT; Path=/; Secure;
        HttpOnly
      - GUEST_LANGUAGE_ID=sk_SK; Expires=Tue, 14-Dec-2066 23:59:11 GMT; Path=/; Secure;
        HttpOnly
      - GUEST_LANGUAGE_ID=sk_SK; Expires=Tue, 14-Dec-2066 23:59:11 GMT; Path=/; Secure;
        HttpOnly
      - JSESSIONID=C634CEC376050447DF7B1B841496061C; Path=/; Secure; HttpOnly
      - f5avrbbbbbbbbbbbbbbbb=OOKHPFIPKLNBMKNEIACEJKHMMFIJBHMHBEECHAFAAFJDPDBAEEJLOFKHADAAOMLLDBIOGPDJIMIFHFJIIJABFIKCHJAJBNAFJNLBOABCGOGFBIKGBJAAOLHCOHCNENPF;
        HttpOnly
      Etag:
      - '"372da6aa"'
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Fri, 01 May 2020 21:17:03 GMT
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        





















































		<!DOCTYPE html>






	
	



















		














	
	
	
		
	
	
	
	
	
	
		
		
		
	
	
		
	
	
	
	
	

	
	
	

	
	
	

	
	
	
	
	



































	
	

<html class="aui ltr" dir="ltr" lang="sk-SK">
<head>
	<title>Otvorené dáta - MSSR</title>
	<meta content="initial-scale=1.0, width=device-width" name="viewport" />
	<meta name="google-site-verification" content="eIhLWaJLlKgP5bweX9SjCcYQUH-E5aE3QFlO3Cnv7KM" />
	<meta name="robots" content="noindex"/>
	<meta name="googlebot" content="noindex"/>
	

























































<meta content="text/html; charset=UTF-8" http-equiv="content-type" />





































































	

	

	

	

	

	



<link href="https://obcan.justice.sk/resspublictheme/images/favicon.ico" rel="Shortcut Icon" />





	<link href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;opendata&#x3f;" rel="canonical" />

	

			

			<link href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;en&#x2f;opendata" hreflang="en-US" rel="alternate" />

	

			
				<link href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;opendata&#x3f;" hreflang="x-default" rel="alternate" />
			

			<link href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;opendata" hreflang="sk-SK" rel="alternate" />

	





<link class="lfr-css-file" href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;resspublictheme&#x2f;css&#x2f;aui&#x2e;css&#x3f;browserId&#x3d;other&#x26;themeId&#x3d;resspublic_WAR_resspublictheme&#x26;minifierType&#x3d;css&#x26;languageId&#x3d;sk_SK&#x26;b&#x3d;6203&#x26;t&#x3d;1539249574000" rel="stylesheet" type="text/css" />

<link href="&#x2f;html&#x2f;css&#x2f;main&#x2e;css&#x3f;browserId&#x3d;other&#x26;themeId&#x3d;resspublic_WAR_resspublictheme&#x26;minifierType&#x3d;css&#x26;languageId&#x3d;sk_SK&#x26;b&#x3d;6203&#x26;t&#x3d;1429138192000" rel="stylesheet" type="text/css" />









	

				<link href="https://obcan.justice.sk/html/portlet/journal_content/css/main.css?browserId=other&amp;themeId=resspublic_WAR_resspublictheme&amp;minifierType=css&amp;languageId=sk_SK&amp;b=6203&amp;t=1585235405000" rel="stylesheet" type="text/css" />

	

				<link href="https://obcan.justice.sk/isu-front/css/main.min.css?browserId=other&amp;themeId=resspublic_WAR_resspublictheme&amp;minifierType=css&amp;languageId=sk_SK&amp;b=6203&amp;t=1588256410000" rel="stylesheet" type="text/css" />

	







<script type="text/javascript">
	// <![CDATA[
		var Liferay = {
			Browser: {
				acceptsGzip: function() {
					return false;
				},
				getMajorVersion: function() {
					return 0.0;
				},
				getRevision: function() {
					return "";
				},
				getVersion: function() {
					return "";
				},
				isAir: function() {
					return false;
				},
				isChrome: function() {
					return false;
				},
				isFirefox: function() {
					return false;
				},
				isGecko: function() {
					return false;
				},
				isIe: function() {
					return false;
				},
				isIphone: function() {
					return false;
				},
				isLinux: function() {
					return false;
				},
				isMac: function() {
					return false;
				},
				isMobile: function() {
					return false;
				},
				isMozilla: function() {
					return false;
				},
				isOpera: function() {
					return false;
				},
				isRtf: function() {
					return false;
				},
				isSafari: function() {
					return false;
				},
				isSun: function() {
					return false;
				},
				isWap: function() {
					return false;
				},
				isWapXhtml: function() {
					return false;
				},
				isWebKit: function() {
					return false;
				},
				isWindows: function() {
					return false;
				},
				isWml: function() {
					return false;
				}
			},

			Data: {
				NAV_SELECTOR: '#navigation',

				isCustomizationView: function() {
					return false;
				},

				notices: [
					null

					

					
				]
			},

			ThemeDisplay: {
				
					getLayoutId: function() {
						return "40";
					},
					getLayoutURL: function() {
						return "https://obcan.justice.sk/opendata";
					},
					getParentLayoutId: function() {
						return "31";
					},
					isPrivateLayout: function() {
						return "false";
					},
					isVirtualLayout: function() {
						return false;
					},
				

				getBCP47LanguageId: function() {
					return "sk-SK";
				},
				getCDNBaseURL: function() {
					return "https://obcan.justice.sk";
				},
				getCDNDynamicResourcesHost: function() {
					return "";
				},
				getCDNHost: function() {
					return "";
				},
				getCompanyId: function() {
					return "20202";
				},
				getCompanyGroupId: function() {
					return "20242";
				},
				getDefaultLanguageId: function() {
					return "sk_SK";
				},
				getDoAsUserIdEncoded: function() {
					return "";
				},
				getLanguageId: function() {
					return "sk_SK";
				},
				getParentGroupId: function() {
					return "20229";
				},
				getPathContext: function() {
					return "";
				},
				getPathImage: function() {
					return "/image";
				},
				getPathJavaScript: function() {
					return "/html/js";
				},
				getPathMain: function() {
					return "/c";
				},
				getPathThemeImages: function() {
					return "https://obcan.justice.sk/resspublictheme/images";
				},
				getPathThemeRoot: function() {
					return "/resspublictheme";
				},
				getPlid: function() {
					return "25876";
				},
				getPortalURL: function() {
					return "https://obcan.justice.sk";
				},
				getPortletSetupShowBordersDefault: function() {
					return true;
				},
				getScopeGroupId: function() {
					return "20229";
				},
				getScopeGroupIdOrLiveGroupId: function() {
					return "20229";
				},
				getSessionId: function() {
					
						
						
							return "";
						
					
				},
				getSiteGroupId: function() {
					return "20229";
				},
				getURLControlPanel: function() {
					return "/group/control_panel?refererPlid=25876";
				},
				getURLHome: function() {
					return "https\x3a\x2f\x2fobcan\x2ejustice\x2esk\x2fvstup";
				},
				getUserId: function() {
					return "20206";
				},
				getUserName: function() {
					
						
						
							return "";
						
					
				},
				isAddSessionIdToURL: function() {
					return false;
				},
				isFreeformLayout: function() {
					return false;
				},
				isImpersonated: function() {
					return false;
				},
				isSignedIn: function() {
					return false;
				},
				isStateExclusive: function() {
					return false;
				},
				isStateMaximized: function() {
					return false;
				},
				isStatePopUp: function() {
					return false;
				}
			},

			PropsValues: {
				NTLM_AUTH_ENABLED: false
			}
		};

		var themeDisplay = Liferay.ThemeDisplay;

		

		Liferay.AUI = {
			getAvailableLangPath: function() {
				return 'available_languages.jsp?browserId=other&themeId=resspublic_WAR_resspublictheme&colorSchemeId=01&minifierType=js&languageId=sk_SK&b=6203&t=1429195226000';
			},
			getCombine: function() {
				return true;
			},
			getComboPath: function() {
				return '/combo/?browserId=other&minifierType=&languageId=sk_SK&b=6203&t=1429195226000&';
			},
			getFilter: function() {
				
					
						return 'min';
					
					
					
				
			},
			getJavaScriptRootPath: function() {
				return '/html/js';
			},
			getLangPath: function() {
				return 'aui_lang.jsp?browserId=other&themeId=resspublic_WAR_resspublictheme&colorSchemeId=01&minifierType=js&languageId=sk_SK&b=6203&t=1429195226000';
			}
		};

		Liferay.authToken = 'qRVLmuZb';

		

		Liferay.currentURL = '\x2fopendata\x3f';
		Liferay.currentURLEncoded = '%2Fopendata%3F';
	// ]]>
</script>


	
		
			
				<script src="/html/js/barebone.jsp?browserId=other&amp;themeId=resspublic_WAR_resspublictheme&amp;colorSchemeId=01&amp;minifierType=js&amp;minifierBundleId=javascript.barebone.files&amp;languageId=sk_SK&amp;b=6203&amp;t=1429195226000" type="text/javascript"></script>
			
			
		
	
	


<script type="text/javascript">
	// <![CDATA[
		

			

			
				Liferay.Portlet.list = ['71_INSTANCE_Wv9IG03FD1Mt', '56_INSTANCE_0mYnllP7bIzt', 'isuopendata_WAR_isufront', '82'];
			
		

		

		
	// ]]>
</script>





	
		

			

			
				<script type="text/javascript">
					(function(i, s, o, g, r, a, m) {
						i['GoogleAnalyticsObject'] = r;

						i[r] = i[r] || function() {
							var arrayValue = i[r].q || [];

							i[r].q = arrayValue;

							(i[r].q).push(arguments);
						};

						i[r].l = 1 * new Date();

						a = s.createElement(o);
						m = s.getElementsByTagName(o)[0];
						a.async = 1;
						a.src = g;
						m.parentNode.insertBefore(a, m);
					})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

					ga('create', 'UA-114873678-2', 'auto');
					ga('send', 'pageview');
				</script>
			
		
		
	










	











<link class="lfr-css-file" href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;resspublictheme&#x2f;css&#x2f;main&#x2e;css&#x3f;browserId&#x3d;other&#x26;themeId&#x3d;resspublic_WAR_resspublictheme&#x26;minifierType&#x3d;css&#x26;languageId&#x3d;sk_SK&#x26;b&#x3d;6203&#x26;t&#x3d;1539249574000" rel="stylesheet" type="text/css" />








	<style type="text/css">

		

			

				

					

#p_p_id_71_INSTANCE_Wv9IG03FD1Mt_ .portlet-borderless-container {
border-width:;
border-style:
}




				

			

		

			

				

					

#p_p_id_56_INSTANCE_0mYnllP7bIzt_ .portlet-borderless-container {
border-width:;
border-style:
}




				

			

		

			

				

					

#p_p_id_isuopendata_WAR_isufront_ .portlet-borderless-container {
border-width:;
border-style:
}




				

			

		

			

		

			

				

					

#p_p_id_82_ .portlet-borderless-container {
border-width:;
border-style:
}




				

			

		

	</style>



<script type="text/javascript">
function TopMenuMouseOver(thisObject) {
	        	if (thisObject.className != 'TopMenuSel')
	        	{
		            thisObject.style.backgroundImage = thisObject.style.backgroundImage.replace('_normal', '_mouseover');
		            thisObject.className = 'TopMenuHover';
		        }
	        }
function TopMenuMouseOut(thisObject) {
	           	if (thisObject.className != 'TopMenuSel')
	        	{
		            thisObject.style.backgroundImage = thisObject.style.backgroundImage.replace('_mouseover', '_normal');
		                thisObject.className = '';
		        }
	        }
</script>	
</head>
<body class=" yui3-skin-sam controls-visible guest-site signed-out public-page site dockbar-split">       
<a href="#main-content" id="skip-to-content">Preskoč na obsah</a>





















































































































<div style="min-height: 100%;position: relative;">
	<div class="all">
		<div id="container">
			



























































	

	<div class="portlet-boundary portlet-boundary_82_  portlet-static portlet-static-end portlet-borderless portlet-language " id="p_p_id_82_" >
		<span id="p_82"></span>



	
	
	

		
























































	
	
	
	
	

		

		
			
			

				

				<div class="portlet-borderless-container" style="">
					

					


	<div class="portlet-body">



	
		
			
			
				
					



























































































































	

				

				
					
					
						


	
	
		


























































































































	
	

		

			
				
					
						
							<span class="taglib-language-list-text" lang="sk-SK">Slovenčina</span>
						
						
					
				
				
			

		

			
				
					
						
						
							<a href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;opendata&#x3f;p_p_id&#x3d;82&#x26;p_p_lifecycle&#x3d;1&#x26;p_p_state&#x3d;normal&#x26;p_p_mode&#x3d;view&#x26;_82_struts_action&#x3d;&#x25;2Flanguage&#x25;2Fview&#x26;_82_redirect&#x3d;&#x25;2Fopendata&#x25;3F&#x26;_82_languageId&#x3d;en_US" class="taglib-language-list-text last" lang="en-US" >English</a>
						
					
				
				
			

		

	

	

					
				
			
		
	
	



	</div>

				</div>

				
			
		
	


	





		
	</div>




			
			<div id="topSmallNav">
<ul>
	<li><a href="https://www.justice.gov.sk/Stranky/Informacie/Mapa-stranky.aspx" title="Mapa stránky">Mapa stránky</a></li>
	<li><a href="javascript:VerziaPreSlabozrakych()" title="Verzia pre slabozrakých">Verzia pre slabozrakých</a></li>
	<li><a href="https://www.justice.gov.sk/Stranky/Informacie/Rss.aspx" title="poskytovanie informácií">RSS</a></li>
</ul>
</div>

<div class="cleaner" style="height: 0px;">&nbsp;</div>
<script type="text/javascript">
function VerziaPreSlabozrakych()
	        {
	        	for(i=0;i<document.styleSheets.length;i++) {
					void(document.styleSheets.item(i).disabled=true);
				}
			
				
	        }
</script>
			<div id="topBanner"><a class="topLogo" href="https://www.justice.gov.sk" style="float: left;margin-left:32px; " title="Hlavná stránka"><img alt="Logo SR" src="/documents/20229/0/Logo/84d73b2e-ebe1-4fc3-964e-9ee13b9c8c08?t=1501834442916" style="width: 225px;" title="Logo SR" /> </a>

<div style="float:right;width:322px;">
<div id="topMenuSearch">
<form action="https://www.justice.gov.sk/Stranky/Informacie/Vysledky-vyhladavania.aspx" method="GET"><input name="s" type="hidden" value="All Sites" /> <input aria-label="Hľadaj" id="ctl00_ctl00_IdMpTop_txtSearch" name="k" placeholder="Hľadaj na celej stránke" type="text" value="" /><input alt="Hľadaj" name="ctl00$ctl00$IdMpTop$btnSearch" src="/resspublictheme/images/btn-ok-blue.png" style="border-width:0px;" type="image" />&nbsp;</form>
</div>

<div style="display:none"><a class="rozsirene" href="#">Rozšírené vyhľadávanie</a></div>

<div style="clear:both;">&nbsp;</div>
</div>
</div>

<div class="cleaner" style="height: 20px;">&nbsp;</div>
			<div id="topNav">
<ul>
	<li onmouseout="TopMenuMouseOut(this);" onmouseover="TopMenuMouseOver(this);" style="background-image: url('/resspublictheme/images/ministerstvo_normal.png'); background-position: 0px 0px; margin-left: 1px; width: 182px;"><a class="border" href="https://www.justice.gov.sk/Stranky/Ministerstvo/Uvod.aspx" title="Ministerstvo">Ministerstvo</a></li>
	<li onmouseout="TopMenuMouseOut(this);" onmouseover="TopMenuMouseOver(this);" style="background-image: url('/resspublictheme/images/sudy_normal.png'); background-position: 0px 0px; width: 227px;"><a class="border" href="/infosud" title="Súdy">Súdy a rozhodnutia</a></li>
	<li onmouseout="TopMenuMouseOut(this);" onmouseover="TopMenuMouseOver(this);" style="background-image: url('/resspublictheme/images/zakony_normal.png'); background-position: 0px 0px; width: 200px;"><a class="border" href="https://www.justice.gov.sk/Stranky/Zakony/Uvod.aspx" title="Zákony">Právne predpisy</a></li>
	<li onmouseout="TopMenuMouseOut(this);" onmouseover="TopMenuMouseOver(this);" style="background-image:url('/resspublictheme/images/registre_normal.png'); background-position:0px 0px; width:170px;"><a class="border" href="/infosud-registre/-/isu-registre/zoznam/mediator" title="Registre">Registre</a></li>
	<li onmouseout="TopMenuMouseOut(this);" onmouseover="TopMenuMouseOver(this);" style="background-image:url('/resspublictheme/images/nasesluzby_normal.png'); background-position:0px 0px; width:185px;"><a href="https://www.justice.gov.sk/Stranky/Nase-sluzby/Uvod.aspx" style="padding-right:24px;" title="Naše služby">Naše služby</a></li>
</ul>
</div>

<div class="cleaner" style="height: 8px;">&nbsp;</div>
			<div id="content">
											







































































































<div class="columns-2" id="main-content" role="main">
	<div class="portlet-layout row-fluid">
		<div class="portlet-column portlet-column-first span4" id="column-1">
			<div class="portlet-dropzone portlet-column-content portlet-column-content-first" id="layout-column_column-1">



























































	

	<div class="portlet-boundary portlet-boundary_71_  portlet-static portlet-static-end portlet-borderless portlet-navigation " id="p_p_id_71_INSTANCE_Wv9IG03FD1Mt_" >
		<span id="p_71_INSTANCE_Wv9IG03FD1Mt"></span>



	
	
	

		
























































	
	
	
	
	

		

		
			
			

				

				<div class="portlet-borderless-container" style="">
					

					


	<div class="portlet-body">



	
		
			
			
				
					



























































































































	

				

				
					
					
						


	
	
		

























































































































	

	<div class="leftBox nav-menu nav-menu-style-">
                <div class="header">
                    <div class="inner">
                        <div class="headerIcon"></div>
                        <div class="headerText">
                            
                                    
                                            <h2>
                                                    <a href="https://obcan.justice.sk/vstup" >Služby</a>
                                            </h2>
                                    
                                    
                                    
                                    
                            
                        </div>
                    </div>
                </div>
		<div class="inner">
            <div class="divider"></div>
            <div class="items">
                <ul class="layouts level-1"><li ><a href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;vstup&#x2f;sudny-spis" > Poskytovanie informácií z elektronického súdneho spisu účastníkom konania (eSlužby ESS)</a></li><li ><a href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;vstup&#x2f;dennik-znalca" > Elektronický denník znalca, tlmočníka a prekladateľa</a></li><li ><a href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;vstup&#x2f;exekucie" > Centrálna evidencia exekúcií</a></li><li class="open selected " ><a class="open selected " href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;opendata" > Otvorené dáta</a><ul class="layouts level-2"><li ><a href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;ezaloby2" > Podávanie návrhov a súvisiacich písomností na súdne konanie</a></li></ul></li><li ><a href="https&#x3a;&#x2f;&#x2f;obcan&#x2e;justice&#x2e;sk&#x2f;help" > Používateľské príručky</a></li></ul>
            </div>
        </div>
	</div>



	

					
				
			
		
	
	



	</div>

				</div>

				
			
		
	


	





		
	</div>




</div>
		</div>

		<div class="portlet-column portlet-column-last span8" id="column-2">
			<div class="portlet-dropzone portlet-column-content portlet-column-content-last" id="layout-column_column-2">



























































	

	<div class="portlet-boundary portlet-boundary_56_  portlet-static portlet-static-end portlet-borderless portlet-journal-content " id="p_p_id_56_INSTANCE_0mYnllP7bIzt_" >
		<span id="p_56_INSTANCE_0mYnllP7bIzt"></span>



	
	
	

		
























































	
	
	
	
	

		

		
			
			

				

				<div class="portlet-borderless-container" style="">
					

					


	<div class="portlet-body">



	
		
			
			
				
					



























































































































	

				

				
					
					
						


	
	
		
































































	
	

		

		
			
			

				

				
					

						

						

						<div class="journal-content-article">
							<h1>Otvorené dáta</h1>

<p>V rámci iniciatívy&nbsp;Iniciatívy pre otvorené vládnutie, ktorej zámerom je zlepšovanie vládnutia a spravovania vecí verejných cez zvyšovanie transparentnosti, efektivity a zodpovednosti, poskytuje Ministerstvo spravodlivosti Slovenskej republiky tieto datasety. Datasety sú v súčasnosti dodávané ako úplné súbory pričom v skorej budúcnosti poskytneme aj API - aplikačné rozhranie, pomocou ktorého bude možné v dátach vyhľadávať, alebo ich inkrementálne zbierať.&nbsp;</p>
						</div>

						
					
					
				
			
		
	







	
		<div class="entry-links">
			































































		</div>
	

	

	

	

					
				
			
		
	
	



	</div>

				</div>

				
			
		
	


	





		
	</div>
































































	

	<div class="portlet-boundary portlet-boundary_isuopendata_WAR_isufront_  portlet-static portlet-static-end portlet-borderless  " id="p_p_id_isuopendata_WAR_isufront_" >
		<span id="p_isuopendata_WAR_isufront"></span>



	
	
	

		

			
				
					
						
					
























































	
	
	
	
	

		

		
			
			

				

				<div class="portlet-borderless-container" style="">
					

					


	<div class="portlet-body">



	
		
			
			
				
					



























































































































	

				

				
					
					
						


	

		





















<h2>Datasety</h2>



    <h3>Výberové konania</h3>
    
        <ul>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_vk_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                        Dátum aktualizácie: 30.4.2020 22:00<br>
                        Veľkosť súboru: 11 001 942 bajtov
                    </a>
                </li>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_vk_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                        Dátum aktualizácie: 30.4.2020 22:00<br>
                        Veľkosť súboru: 9 847 039 bajtov
                    </a>
                </li>
            
        </ul>
    
    

    <h3>Verejné obstarávania</h3>
    
        <ul>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_vo_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                        Dátum aktualizácie: 30.4.2020 22:05<br>
                        Veľkosť súboru: 5 876 838 bajtov
                    </a>
                </li>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_vo_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                        Dátum aktualizácie: 30.4.2020 22:05<br>
                        Veľkosť súboru: 5 323 114 bajtov
                    </a>
                </li>
            
        </ul>
    
    

    <h3>Oznamy</h3>
    
        <ul>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_oz_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                        Dátum aktualizácie: 30.4.2020 22:21<br>
                        Veľkosť súboru: 118 031 075 bajtov
                    </a>
                </li>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_oz_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                        Dátum aktualizácie: 30.4.2020 22:21<br>
                        Veľkosť súboru: 113 401 448 bajtov
                    </a>
                </li>
            
        </ul>
    
    

    <h3>Rozvrhy práce súdov</h3>
    
        <ul>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                        Dátum aktualizácie: 18.2.2016 23:10<br>
                        Veľkosť súboru: 3 249 552 bajtov
                    </a>
                </li>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                        Dátum aktualizácie: 18.2.2016 23:10<br>
                        Veľkosť súboru: 2 994 400 bajtov
                    </a>
                </li>
            
        </ul>
    
    
        <ul>
            
                <li>
                    Rok 2016
                    
                        <ul>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2016_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                        Dátum aktualizácie: 20.11.2019 10:13<br>
                                        Veľkosť súboru: 17 001 863 bajtov
                                    </a>
                                </li>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2016_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                        Dátum aktualizácie: 20.11.2019 10:13<br>
                                        Veľkosť súboru: 15 874 437 bajtov
                                    </a>
                                </li>
                            
                        </ul>
                    
                    
                </li>
            
                <li>
                    Rok 2017
                    
                        <ul>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2017_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                        Dátum aktualizácie: 20.11.2019 9:56<br>
                                        Veľkosť súboru: 9 116 426 bajtov
                                    </a>
                                </li>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2017_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                        Dátum aktualizácie: 20.11.2019 9:56<br>
                                        Veľkosť súboru: 8 538 558 bajtov
                                    </a>
                                </li>
                            
                        </ul>
                    
                    
                </li>
            
                <li>
                    Rok 2018
                    
                        <ul>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2018_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                        Dátum aktualizácie: 20.11.2019 9:38<br>
                                        Veľkosť súboru: 44 003 809 bajtov
                                    </a>
                                </li>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2018_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                        Dátum aktualizácie: 20.11.2019 9:37<br>
                                        Veľkosť súboru: 41 146 524 bajtov
                                    </a>
                                </li>
                            
                        </ul>
                    
                    
                </li>
            
                <li>
                    Rok 2019
                    
                    
                        <ul>
                            
                                Január
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-1_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:47<br>
                                                Veľkosť súboru:
                                                1 234 526
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-1_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:47<br>
                                                Veľkosť súboru:
                                                1 151 884
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Február
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-2_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:48<br>
                                                Veľkosť súboru:
                                                1 768 667
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-2_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:48<br>
                                                Veľkosť súboru:
                                                1 644 330
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Marec
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-3_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:48<br>
                                                Veľkosť súboru:
                                                2 296 100
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-3_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:48<br>
                                                Veľkosť súboru:
                                                2 149 736
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Apríl
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-4_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:48<br>
                                                Veľkosť súboru:
                                                861 572
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-4_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:48<br>
                                                Veľkosť súboru:
                                                804 232
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Máj
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-5_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:49<br>
                                                Veľkosť súboru:
                                                784 642
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-5_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:49<br>
                                                Veľkosť súboru:
                                                731 555
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Jún
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-6_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:49<br>
                                                Veľkosť súboru:
                                                1 194 886
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-6_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:49<br>
                                                Veľkosť súboru:
                                                1 114 651
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Júl
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-7_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:49<br>
                                                Veľkosť súboru:
                                                1 506 157
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-7_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:49<br>
                                                Veľkosť súboru:
                                                1 404 610
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                August
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-8_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:49<br>
                                                Veľkosť súboru:
                                                794 812
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-8_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:49<br>
                                                Veľkosť súboru:
                                                741 067
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                September
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-9_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:50<br>
                                                Veľkosť súboru:
                                                3 510 915
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-9_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:50<br>
                                                Veľkosť súboru:
                                                3 248 651
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Október
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-10_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 21.11.2019 1:00<br>
                                                Veľkosť súboru:
                                                7 566 983
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-10_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 21.11.2019 1:00<br>
                                                Veľkosť súboru:
                                                7 086 311
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                November
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-11_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 1.12.2019 1:01<br>
                                                Veľkosť súboru:
                                                10 187 967
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-11_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.12.2019 1:00<br>
                                                Veľkosť súboru:
                                                9 551 118
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                December
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-12_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 1.1.2020 1:00<br>
                                                Veľkosť súboru:
                                                13 504 898
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2019-12_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.1.2020 1:00<br>
                                                Veľkosť súboru:
                                                12 618 697
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                        </ul>
                    
                </li>
            
                <li>
                    Rok 2020
                    
                    
                        <ul>
                            
                                Január
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2020-01_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 1.2.2020 1:00<br>
                                                Veľkosť súboru:
                                                4 315 460
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2020-01_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.2.2020 1:00<br>
                                                Veľkosť súboru:
                                                4 030 689
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Február
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2020-02_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 1.3.2020 1:00<br>
                                                Veľkosť súboru:
                                                3 181 405
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2020-02_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.3.2020 1:00<br>
                                                Veľkosť súboru:
                                                2 974 474
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Marec
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2020-03_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 1.4.2020 0:00<br>
                                                Veľkosť súboru:
                                                4 606 869
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2020-03_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.4.2020 0:00<br>
                                                Veľkosť súboru:
                                                4 309 441
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Apríl
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2020-04_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 1.5.2020 0:00<br>
                                                Veľkosť súboru:
                                                5 198 441
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2020-04_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.5.2020 0:00<br>
                                                Veľkosť súboru:
                                                4 855 294
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Máj
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2020-05_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 30.4.2020 22:10<br>
                                                Veľkosť súboru:
                                                202
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_rps_2020-05_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 30.4.2020 22:10<br>
                                                Veľkosť súboru:
                                                167
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                        </ul>
                    
                </li>
            
        </ul>
    

    <h3>Súdne pojednávania</h3>
    
        <ul>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sp_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                        Dátum aktualizácie: 30.4.2020 22:30<br>
                        Veľkosť súboru: 2 246 377 bajtov
                    </a>
                </li>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sp_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                        Dátum aktualizácie: 30.4.2020 22:30<br>
                        Veľkosť súboru: 2 139 726 bajtov
                    </a>
                </li>
            
        </ul>
    
    

    <h3>Súdne rozhodnutia</h3>
    
        <ul>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                        Dátum aktualizácie: 29.4.2019 5:29<br>
                        Veľkosť súboru: 7 575 885 516 bajtov
                    </a>
                </li>
            
        </ul>
    
    
        <ul>
            
                <li>
                    Rok 2016
                    
                        <ul>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2016_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                        Dátum aktualizácie: 20.11.2019 14:54<br>
                                        Veľkosť súboru: 1 289 291 449 bajtov
                                    </a>
                                </li>
                            
                        </ul>
                    
                    
                </li>
            
                <li>
                    Rok 2017
                    
                        <ul>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2017_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                        Dátum aktualizácie: 20.11.2019 12:49<br>
                                        Veľkosť súboru: 569 474 076 bajtov
                                    </a>
                                </li>
                            
                        </ul>
                    
                    
                </li>
            
                <li>
                    Rok 2018
                    
                        <ul>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2018_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                        Dátum aktualizácie: 19.11.2019 14:37<br>
                                        Veľkosť súboru: 1 954 119 547 bajtov
                                    </a>
                                </li>
                            
                        </ul>
                    
                    
                </li>
            
                <li>
                    Rok 2019
                    
                    
                        <ul>
                            
                                Január
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2019-1_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 19.11.2019 15:06<br>
                                                Veľkosť súboru:
                                                165 600 543
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Február
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2019-2_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 19.11.2019 15:14<br>
                                                Veľkosť súboru:
                                                156 332 542
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Marec
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2019-3_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 19.11.2019 15:23<br>
                                                Veľkosť súboru:
                                                182 178 678
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Apríl
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2019-4_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 19.11.2019 15:31<br>
                                                Veľkosť súboru:
                                                174 363 765
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Máj
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2019-5_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 19.11.2019 15:44<br>
                                                Veľkosť súboru:
                                                183 489 709
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Jún
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2019-6_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 19.11.2019 15:57<br>
                                                Veľkosť súboru:
                                                186 602 479
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Júl
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2019-7_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 19.11.2019 16:03<br>
                                                Veľkosť súboru:
                                                99 044 178
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                August
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2019-8_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 19.11.2019 16:13<br>
                                                Veľkosť súboru:
                                                202 598 372
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                September
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2019-9_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 19.11.2019 16:26<br>
                                                Veľkosť súboru:
                                                188 740 269
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Október
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2019-10_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 21.11.2019 1:43<br>
                                                Veľkosť súboru:
                                                255 438 306
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                November
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2019-11_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.12.2019 1:44<br>
                                                Veľkosť súboru:
                                                236 217 044
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                December
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2019-12_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.1.2020 1:38<br>
                                                Veľkosť súboru:
                                                193 092 079
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                        </ul>
                    
                </li>
            
                <li>
                    Rok 2020
                    
                    
                        <ul>
                            
                                Január
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2020-01_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.2.2020 1:47<br>
                                                Veľkosť súboru:
                                                255 282 542
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Február
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2020-02_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.3.2020 1:42<br>
                                                Veľkosť súboru:
                                                220 735 320
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Marec
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2020-03_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.4.2020 0:38<br>
                                                Veľkosť súboru:
                                                164 760 469
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Apríl
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_sr_2020-04_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.5.2020 0:36<br>
                                                Veľkosť súboru:
                                                126 724 421
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                        </ul>
                    
                </li>
            
        </ul>
    

    <h3>Zasadnutia sudcovskej rady</h3>
    
        <ul>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_zsr_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                        Dátum aktualizácie: 30.4.2020 22:25<br>
                        Veľkosť súboru: 6 177 301 bajtov
                    </a>
                </li>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_zsr_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                        Dátum aktualizácie: 30.4.2020 22:25<br>
                        Veľkosť súboru: 5 729 496 bajtov
                    </a>
                </li>
            
        </ul>
    
    

    <h3>Zmluvy</h3>
    
        <ul>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                        Dátum aktualizácie: 3.4.2017 22:43<br>
                        Veľkosť súboru: 33 180 902 bajtov
                    </a>
                </li>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                        Dátum aktualizácie: 3.4.2017 22:43<br>
                        Veľkosť súboru: 27 933 789 bajtov
                    </a>
                </li>
            
        </ul>
    
    
        <ul>
            
                <li>
                    Rok 2017
                    
                        <ul>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2017_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                        Dátum aktualizácie: 20.11.2019 9:56<br>
                                        Veľkosť súboru: 4 915 192 bajtov
                                    </a>
                                </li>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2017_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                        Dátum aktualizácie: 20.11.2019 9:56<br>
                                        Veľkosť súboru: 4 187 738 bajtov
                                    </a>
                                </li>
                            
                        </ul>
                    
                    
                </li>
            
                <li>
                    Rok 2018
                    
                        <ul>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2018_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                        Dátum aktualizácie: 19.11.2019 16:47<br>
                                        Veľkosť súboru: 6 225 400 bajtov
                                    </a>
                                </li>
                            
                                
                                <li>
                                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2018_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                        Dátum aktualizácie: 19.11.2019 16:47<br>
                                        Veľkosť súboru: 5 174 927 bajtov
                                    </a>
                                </li>
                            
                        </ul>
                    
                    
                </li>
            
                <li>
                    Rok 2019
                    
                    
                        <ul>
                            
                                Január
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-1_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:47<br>
                                                Veľkosť súboru:
                                                420 569
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-1_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:47<br>
                                                Veľkosť súboru:
                                                356 463
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Február
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-2_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:46<br>
                                                Veľkosť súboru:
                                                368 794
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-2_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:46<br>
                                                Veľkosť súboru:
                                                313 992
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Marec
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-3_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:46<br>
                                                Veľkosť súboru:
                                                385 302
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-3_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:46<br>
                                                Veľkosť súboru:
                                                327 234
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Apríl
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-4_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:46<br>
                                                Veľkosť súboru:
                                                370 154
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-4_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:46<br>
                                                Veľkosť súboru:
                                                314 332
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Máj
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-5_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:46<br>
                                                Veľkosť súboru:
                                                391 599
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-5_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:46<br>
                                                Veľkosť súboru:
                                                330 825
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Jún
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-6_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:46<br>
                                                Veľkosť súboru:
                                                388 584
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-6_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:46<br>
                                                Veľkosť súboru:
                                                328 456
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Júl
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-7_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:45<br>
                                                Veľkosť súboru:
                                                374 765
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-7_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:45<br>
                                                Veľkosť súboru:
                                                318 349
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                August
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-8_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:45<br>
                                                Veľkosť súboru:
                                                359 495
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-8_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:45<br>
                                                Veľkosť súboru:
                                                306 550
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                September
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-9_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 11.11.2019 8:45<br>
                                                Veľkosť súboru:
                                                402 159
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-9_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 11.11.2019 8:45<br>
                                                Veľkosť súboru:
                                                342 729
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Október
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-10_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 21.11.2019 1:15<br>
                                                Veľkosť súboru:
                                                499 142
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-10_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 21.11.2019 1:15<br>
                                                Veľkosť súboru:
                                                424 098
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                November
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-11_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 1.12.2019 1:15<br>
                                                Veľkosť súboru:
                                                433 527
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-11_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.12.2019 1:15<br>
                                                Veľkosť súboru:
                                                373 150
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                December
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-12_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 1.1.2020 1:15<br>
                                                Veľkosť súboru:
                                                615 226
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2019-12_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.1.2020 1:15<br>
                                                Veľkosť súboru:
                                                520 369
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                        </ul>
                    
                </li>
            
                <li>
                    Rok 2020
                    
                    
                        <ul>
                            
                                Január
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2020-01_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 1.2.2020 1:15<br>
                                                Veľkosť súboru:
                                                405 238
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2020-01_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.2.2020 1:15<br>
                                                Veľkosť súboru:
                                                343 959
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Február
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2020-02_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 1.3.2020 1:15<br>
                                                Veľkosť súboru:
                                                394 073
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2020-02_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.3.2020 1:15<br>
                                                Veľkosť súboru:
                                                333 322
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Marec
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2020-03_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 1.4.2020 0:15<br>
                                                Veľkosť súboru:
                                                391 743
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2020-03_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.4.2020 0:15<br>
                                                Veľkosť súboru:
                                                332 449
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Apríl
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2020-04_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 1.5.2020 0:15<br>
                                                Veľkosť súboru:
                                                358 231
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2020-04_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 1.5.2020 0:15<br>
                                                Veľkosť súboru:
                                                307 833
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                                Máj
                                <ul>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2020-05_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                                                Dátum aktualizácie: 30.4.2020 22:40<br>
                                                Veľkosť súboru:
                                                202
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                        
                                        <li>
                                            <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=isu_fin_2020-05_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                                                Dátum aktualizácie: 30.4.2020 22:40<br>
                                                Veľkosť súboru:
                                                170
                                                bajtov
                                            </a>
                                        </li>
                                        </li>
                                    
                                </ul>
                            
                        </ul>
                    
                </li>
            
        </ul>
    

    <h3>Sudcovia</h3>
    
        <ul>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=reg-sudcovia_xml.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát XML<br>
                        Dátum aktualizácie: 30.4.2020 22:15<br>
                        Veľkosť súboru: 69 950 bajtov
                    </a>
                </li>
            
                
                <li>
                    <a href="https://obcan.justice.sk/opendata?p_p_id=isuopendata_WAR_isufront&p_p_lifecycle=2&p_p_state=normal&p_p_mode=view&p_p_resource_id=reg-sudcovia_json.zip&p_p_cacheability=cacheLevelPage&p_p_col_id=column-2&p_p_col_pos=1&p_p_col_count=2" title="Stiahnuť súbor vo formáte ZIP">Formát JSON<br>
                        Dátum aktualizácie: 30.4.2020 22:15<br>
                        Veľkosť súboru: 65 366 bajtov
                    </a>
                </li>
            
        </ul>
    
    




	
	

					
				
			
		
	
	



	</div>

				</div>

				
			
		
	

				
				
			

		

	





		
	</div>




</div>
		</div>
	</div>
</div>





	





<form action="#" id="hrefFm" method="post" name="hrefFm">
	<span></span>
</form>
								</div>
		</div>  
	</div>  
  <div class="footerDiv">
    <div style="margin: auto; width: 968px; height: 100px; clear: both;">
<div style="line-height: 100px; vertical-align: middle; float: left;"><a href="http://www.opis.gov.sk"><img alt="Logo OPIS" src="/statistika/img/logo-opis.png" style="height: 60px;" /></a></div>

<div style="line-height: 100px; vertical-align: middle; float: right;"><a href="http://www.vlada.gov.sk/"><img alt="Logo UVSR" src="/statistika/img/logo-uvsr.png" style="height: 70px; margin-left: 30px;" /> </a> <a href="http://www.mfsr.sk/"> <img alt="Logo MFSR" src="/statistika/img/logo-mfsr.png" style="height: 70px; margin-left: 30px;" /> </a> <a href="http://europa.eu/index_sk.htm"> <img alt="Logo EU" src="/statistika/img/logo-eu.png" style="height: 70px; margin-left: 30px;" /> </a></div>
</div>

<div id="bottomMenuCleaner">&nbsp;</div>

<div style="height: 1px;">&nbsp;</div>

<footer id="footer" role="contentinfo">
<ul>
	<li class="rightBorder"><a href="https://www.justice.gov.sk/Stranky/Informacie/Kontakty.aspx/">Kontakty</a></li>
	<li class="rightBorder"><a href="https://www.justice.gov.sk/Stranky/Informacie/Pre-media.aspx">Pre média</a></li>
	<li class="rightBorder"><a href="https://www.justice.gov.sk/Stranky/Informacie/Kariera.aspx">Kariéra</a></li>
	<li class="rightBorder"><a href="https://www.justice.gov.sk/Stranky/Informacie/Poskytovanie-informacii.aspx">Poskytovanie informácií</a></li>
	<li class="rightBorder"><a href="https://www.justice.gov.sk/Stranky/Informacie/Analyticke-centrum.aspx">Analytické centrum MS SR</a></li>
	<li><a href="/vyhlasenie-o-pristupnosti">Vyhlásenie o prístupnosti</a></li>
</ul>

<div class="cleaner" style="height: 40px;">&nbsp;</div>

<div id="copyright" style="line-height: 20px;"><img alt="EU ico" src="/resspublictheme/images/EuMiniIco.png" style="float: left;" title="Eu" /> <span style="color: rgb(255, 255, 255); padding-left: 12px; float: left;">Part<i>of</i> European Union </span> <span style="color: rgb(255, 255, 255); float: right;">COPYRIGHT 2016 © MINISTERSTVO SPRAVODLIVOSTI SR </span> <span style="color: rgb(255, 255, 255); clear: both; float: right;">Správca obsahu: Tlačové oddelenie, e-mail: <a href="mailto:tlacove@justice.sk" style="color: rgb(255, 255, 255); font-size: 14px;">tlacove@justice.sk</a> </span> <span style="color: rgb(255, 255, 255); clear: both; float: right;">Technická podpora pre používateľov: Odbor Service Desk: <a href="https://www.justice.gov.sk/portalapp/Page/KontaktProblem.aspx?IS=eZaloby" style="color: rgb(255, 255, 255); font-size: 14px;">online podpora</a> </span> <span style="color: rgb(255, 255, 255); clear: both; float: right;">Technický prevádzkovateľ: Odbor prevádzky informačných systémov a odbor eJustice, koordinácie a projektovej prípravy </span></div>
</footer>
  </div>
 </div>























































































































	









	











<script type="text/javascript">
// <![CDATA[

	Liferay.Util.addInputFocus();

	

	
		
		

			

			
		
	

// ]]>
</script>

















	

	

		

		
	


<script type="text/javascript">
// <![CDATA[

			Liferay.Portlet.onLoad(
				{
					canEditTitle: false,
					columnPos: 1,
					isStatic: 'end',
					namespacedId: 'p_p_id_isuopendata_WAR_isufront_',
					portletId: 'isuopendata_WAR_isufront',
					refreshURL: '\x2fc\x2fportal\x2frender_portlet\x3fp_l_id\x3d25876\x26p_p_id\x3disuopendata_WAR_isufront\x26p_p_lifecycle\x3d0\x26p_t_lifecycle\x3d0\x26p_p_state\x3dnormal\x26p_p_mode\x3dview\x26p_p_col_id\x3dcolumn-2\x26p_p_col_pos\x3d1\x26p_p_col_count\x3d2\x26p_p_isolated\x3d1\x26currentURL\x3d\x252Fopendata\x253F'
				}
			);
		
			Liferay.Portlet.onLoad(
				{
					canEditTitle: false,
					columnPos: 0,
					isStatic: 'end',
					namespacedId: 'p_p_id_56_INSTANCE_0mYnllP7bIzt_',
					portletId: '56_INSTANCE_0mYnllP7bIzt',
					refreshURL: '\x2fc\x2fportal\x2frender_portlet\x3fp_l_id\x3d25876\x26p_p_id\x3d56_INSTANCE_0mYnllP7bIzt\x26p_p_lifecycle\x3d0\x26p_t_lifecycle\x3d0\x26p_p_state\x3dnormal\x26p_p_mode\x3dview\x26p_p_col_id\x3dcolumn-2\x26p_p_col_pos\x3d0\x26p_p_col_count\x3d2\x26p_p_isolated\x3d1\x26currentURL\x3d\x252Fopendata\x253F'
				}
			);
		
			Liferay.Portlet.onLoad(
				{
					canEditTitle: false,
					columnPos: 0,
					isStatic: 'end',
					namespacedId: 'p_p_id_82_',
					portletId: '82',
					refreshURL: '\x2fc\x2fportal\x2frender_portlet\x3fp_l_id\x3d25876\x26p_p_id\x3d82\x26p_p_lifecycle\x3d0\x26p_t_lifecycle\x3d0\x26p_p_state\x3dnormal\x26p_p_mode\x3dview\x26p_p_col_id\x3dnull\x26p_p_col_pos\x3dnull\x26p_p_col_count\x3dnull\x26p_p_static\x3d1\x26p_p_isolated\x3d1\x26currentURL\x3d\x252Fopendata\x253F'
				}
			);
		
			Liferay.Portlet.onLoad(
				{
					canEditTitle: false,
					columnPos: 0,
					isStatic: 'end',
					namespacedId: 'p_p_id_71_INSTANCE_Wv9IG03FD1Mt_',
					portletId: '71_INSTANCE_Wv9IG03FD1Mt',
					refreshURL: '\x2fc\x2fportal\x2frender_portlet\x3fp_l_id\x3d25876\x26p_p_id\x3d71_INSTANCE_Wv9IG03FD1Mt\x26p_p_lifecycle\x3d0\x26p_t_lifecycle\x3d0\x26p_p_state\x3dnormal\x26p_p_mode\x3dview\x26p_p_col_id\x3dcolumn-1\x26p_p_col_pos\x3d0\x26p_p_col_count\x3d1\x26p_p_isolated\x3d1\x26currentURL\x3d\x252Fopendata\x253F'
				}
			);
		AUI().use('aui-base', 'liferay-menu', 'liferay-notice', 'liferay-poller', 'liferay-session', function(A) {(function() {
	Liferay.Util.addInputType();

	Liferay.Portlet.ready(
		function(portletId, node) {
			Liferay.Util.addInputType(node);
		}
	);

	if (A.UA.mobile) {
		Liferay.Util.addInputCancel();
	}
})();(function() {
	new Liferay.Menu();

	var liferayNotices = Liferay.Data.notices;

	for (var i = 1; i < liferayNotices.length; i++) {
		new Liferay.Notice(liferayNotices[i]);
	}

	
})();(function() {
			Liferay.Session = new Liferay.SessionBase(
				{
					autoExtend: true,
					sessionLength: 120,
					redirectOnExpire: false,
					redirectUrl: 'https\x3a\x2f\x2fobcan\x2ejustice\x2esk\x2fvstup',
					warningLength: 1
				}
			);

			
		})();});
// ]]>
</script>









<script src="https://obcan.justice.sk/resspublictheme/js/main.js?browserId=other&amp;minifierType=js&amp;languageId=sk_SK&amp;b=6203&amp;t=1539249574000" type="text/javascript"></script>



	

	

	<script type="text/javascript">
		// <![CDATA[
			

			
		// ]]>
	</script>





</body>
</html>



    http_version: 
  recorded_at: Fri, 01 May 2020 21:17:03 GMT
recorded_with: VCR 4.0.0
